import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import numpy as np
from prophet import Prophet
from fpdf import FPDF

# Configuration de la page Streamlit
st.set_page_config(page_title="Conseiller Financier Virtuel", layout="wide")

# Titre de la page
st.title("üíº Conseiller Financier Virtuel")

# Onglets pour organiser l'application
tabs = st.tabs([
    "Profil Financier",
    "Suggestions de Portefeuille",
    "Simulateur de Rendement",
    "Comparateur de Fonds",
    "Recherche d'Actions",
    "FAQ",
    "Analyse Technique",
    "Glossaire",
    "Watchlist",
    "Simulation Monte Carlo",
    "Pr√©visions avec Prophet",
    "G√©n√©rer un rapport PDF",
    "Quiz Financier",
    "Cryptomonnaie"
])

# ------------------------
# 1. PROFIL FINANCIER
# ------------------------
with tabs[0]:
    st.header("üìã Profil Financier")
    with st.form("profil_form"):
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("√Çge", min_value=18, max_value=100, value=30)
            objectif = st.selectbox("Objectif d'investissement", ["√âpargne retraite", "Achat maison", "Voyage", "Revenus passifs", "Autre"])
            montant_initial = st.number_input("Montant disponible √† investir maintenant ($)", min_value=0)
            investissement_mensuel = st.number_input("Montant investi chaque mois ($)", min_value=0)
            duree = st.slider("Dur√©e de l'investissement (en ann√©es)", 1, 50, 10)
            connaissance = st.select_slider("Connaissances en finance", options=["D√©butant", "Interm√©diaire", "Avanc√©"])
        with col2:
            risque = st.select_slider("Tol√©rance au risque", options=["Faible", "Mod√©r√©e", "√âlev√©e"])
            situation_familiale = st.selectbox("Situation familiale", ["C√©libataire", "Mari√©(e)", "Avec enfants", "Sans enfants"])
            epargne_urgence = st.radio("Avez-vous une √©pargne d'urgence?", ["Oui", "Non"])
            preference_esg = st.checkbox("Je pr√©f√®re des investissements responsables (ESG)")
            horizon_liquidite = st.radio("Avez-vous besoin de liquidit√© √† court terme?", ["Oui", "Non"])

        submitted = st.form_submit_button("Analyser mon profil")

    if submitted:
        st.success("‚úÖ Profil analys√© avec succ√®s!")
        st.write("### R√©sum√© de votre profil :")
        st.json({
            "√Çge": age,
            "Objectif": objectif,
            "Montant initial": montant_initial,
            "Investissement mensuel": investissement_mensuel,
            "Dur√©e": duree,
            "Tol√©rance au risque": risque,
            "Situation familiale": situation_familiale,
            "√âpargne d'urgence": epargne_urgence,
            "Pr√©f√©rence ESG": preference_esg,
            "Connaissances financi√®res": connaissance,
            "Besoin de liquidit√© court terme": horizon_liquidite
        })

# ------------------------
# 2. SUGGESTIONS DE PORTEFEUILLE
# ------------------------
with tabs[1]:
    st.header("üìä Suggestions de Portefeuille")
    st.markdown("Voici un exemple de r√©partition sugg√©r√©e :")

    labels = ["Actions canadiennes", "Actions internationales", "Obligations", "Fonds ESG"]
    if risque == "Faible":
        sizes = [20, 20, 50, 10]
    elif risque == "Mod√©r√©e":
        sizes = [35, 35, 20, 10]
    else:
        sizes = [50, 35, 5, 10]

    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)

# ------------------------
# 3. SIMULATEUR DE RENDEMENT
# ------------------------
with tabs[2]:
    st.header("üìà Simulateur de Rendement")
    taux = st.slider("Taux de rendement annuel (%)", 1, 15, 5)
    capital = montant_initial
    historique = []
    for annee in range(duree):
        capital = capital * (1 + taux / 100) + 12 * investissement_mensuel
        historique.append(capital)

    st.line_chart(historique)
    st.metric("Montant estim√© √† terme", f"{capital:,.2f} $")

# ------------------------
# 4. COMPARATEUR DE FONDS
# ------------------------
with tabs[3]:
    st.header("üîç Comparateur de Fonds")
    fond1 = st.selectbox("Choisir un premier fonds", ["VEQT", "XEQT", "VCNS", "VGRO"])
    fond2 = st.selectbox("Choisir un deuxi√®me fonds", ["VEQT", "XEQT", "VCNS", "VGRO"], index=1)

    donnees_fonds = {
        "VEQT": {"Rendement moyen": "8%", "Risque": "√âlev√©", "Frais": "0.25%"},
        "XEQT": {"Rendement moyen": "7.8%", "Risque": "√âlev√©", "Frais": "0.20%"},
        "VCNS": {"Rendement moyen": "5%", "Risque": "Faible", "Frais": "0.25%"},
        "VGRO": {"Rendement moyen": "6.5%", "Risque": "Mod√©r√©", "Frais": "0.25%"},
    }

    st.write(f"### üìå {fond1}")
    st.json(donnees_fonds[fond1])
    st.write(f"### üìå {fond2}")
    st.json(donnees_fonds[fond2])

# ------------------------
# 5. RECHERCHE D'ACTIONS
# ------------------------
with tabs[4]:
    st.header("üìä Recherche d'Actions")
    ticker = st.text_input("Entrez le symbole boursier (ex: AAPL, TSLA, MSFT)")
    if ticker:
        try:
            data = yf.Ticker(ticker)
            info = data.info
            st.subheader(info.get("longName", ticker))
            st.write(f"üìà Prix actuel: ${info.get('currentPrice', 'N/A')}")
            st.write(f"üè¢ Secteur: {info.get('sector', 'N/A')}")
            st.write(f"üìä Capitalisation boursi√®re: {info.get('marketCap', 'N/A')}")
            st.write(f"üìÖ Date de cr√©ation: {info.get('fundFamily', 'N/A')}")
            st.write(f"üí∞ Dividende: {info.get('dividendYield', 'N/A')}")
            st.write(f"üîç Description: {info.get('longBusinessSummary', 'N/A')}")
        except Exception as e:
            st.error("Erreur lors de la r√©cup√©ration des donn√©es. V√©rifiez le symbole.")

# ------------------------
# 6. FAQ
# ------------------------
with tabs[5]:
    st.header("‚ùì Questions fr√©quentes")
    with st.expander("C'est quoi un ETF?"):
        st.write("Un ETF (Exchange Traded Fund) est un fonds qui regroupe plusieurs actifs, comme des actions ou des obligations, et qui se transige en bourse comme une action.")

    with st.expander("Comment fonctionne le risque?"):
        st.write("Plus le rendement esp√©r√© est √©lev√©, plus le risque de pertes est grand. C‚Äôest pourquoi il faut bien conna√Ætre son profil d‚Äôinvestisseur.")

    with st.expander("√Ä quelle fr√©quence investir?"):
        st.write("Investir de mani√®re p√©riodique (ex: chaque mois) permet de r√©duire le risque en lissant les fluctuations du march√©.")

    with st.expander("Faut-il avoir une √©pargne d‚Äôurgence?"):
        st.write("Oui, avant d‚Äôinvestir √† long terme, il est important d‚Äôavoir un coussin d‚Äô√©pargne √©quivalent √† 3 √† 6 mois de d√©penses.")

# ------------------------
# 7. ANALYSE TECHNIQUE
# ------------------------
with tabs[6]:
    st.header("üìâ Analyse Technique (√† venir)")
    st.info("Cette section permettra d'ajouter vos propres analyses √† partir de donn√©es boursi√®res historiques.")

# ------------------------
# 8. GLOSSAIRE
# ------------------------
with tabs[7]:
    st.header("üìò Glossaire Financier")
    st.markdown("Voici quelques termes importants pour mieux comprendre la finance :")
    st.write("**ETF** : Fonds n√©goci√© en bourse, panier d'actifs transig√© comme une action.")
    st.write("**Fonds indiciel** : Fonds qui r√©plique la performance d'un indice (ex : S&P 500).")
    st.write("**Diversification** : R√©partition des investissements pour limiter les risques.")
    st.write("**Rendement** : Gain ou perte g√©n√©r√©e par un investissement sur une p√©riode donn√©e.")
    st.write("**Frais de gestion** : Co√ªts annuels pr√©lev√©s par un fonds, exprim√©s en pourcentage.")

# Watchlist d'actions
with tabs[8]:
    st.header("üìù Ma Watchlist")
    watchlist = st.text_area("Ajouter des actions √† suivre (s√©par√©es par des virgules)", "")
    if watchlist:
        actions = [action.strip() for action in watchlist.split(",")]
        st.write("### Liste de suivi :")
        st.write(", ".join(actions))

# Simulation Monte Carlo
with tabs[9]:
    st.header("üîÆ Simulation Monte Carlo")
    st.markdown("Simulez des rendements futurs pour vos investissements.")

    num_simulations = st.number_input("Nombre de simulations", min_value=100, max_value=10000, value=1000)
    volatilite = st.slider("Volatilit√© (%)", min_value=1, max_value=50, value=20)
    rendement_moyen = st.slider("Rendement moyen annuel (%)", min_value=1, max_value=20, value=8)

    simulation_results = []

    for _ in range(num_simulations):
        # Simuler le rendement
        capital_final = montant_initial
        historique_simulation = [capital_final]
        for annee in range(duree):
            rendement = np.random.normal(rendement_moyen / 100, volatilite / 100)
            capital_final *= (1 + rendement)
            historique_simulation.append(capital_final)
        simulation_results.append(historique_simulation)

    # Visualiser les r√©sultats
    for simulation in simulation_results:
        st.line_chart(simulation)

# Pr√©visions avec Prophet
with tabs[10]:
    st.header("üîÆ Pr√©visions avec Prophet")
    st.markdown("Pr√©disez les rendements futurs bas√©s sur les donn√©es historiques.")

    # Exemple de donn√©es historiques (date et valeur)
    data = {
        'ds': pd.date_range(start='2020-01-01', periods=365, freq='D'),
        'y': np.random.normal(0, 1, 365).cumsum()  # Donn√©es al√©atoires pour l'exemple
    }
    df = pd.DataFrame(data)

    # Mod√©lisation avec Prophet
    model = Prophet()
    model.fit(df)
    future = model.make_future_dataframe(df, periods=365)
    forecast = model.predict(future)

    # Visualisation des pr√©visions
    fig = model.plot(forecast)
    st.pyplot(fig)

# G√©n√©ration de rapport PDF
with tabs[11]:
    st.header("üìÑ G√©n√©rer un rapport PDF")
    if submitted:
        st.markdown("T√©l√©chargez votre profil financier en format PDF.")
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        for key, value in {"√Çge": age, "Objectif": objectif}.items():
            pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)

        # Sauvegarder le PDF dans un fichier
        pdf_output = "/mnt/data/profil_financier.pdf"
        pdf.output(pdf_output)

        st.download_button(
            label="T√©l√©charger le rapport PDF",
            data=open(pdf_output, "rb"),
            file_name="profil_financier.pdf",
            mime="application/pdf"
        )

# 12. QUIZ FINANCIER
with tabs[12]:
    st.header("üß† Quiz Financier")
    question = "Quel est l'objectif principal de la diversification ?"
    options = ["Maximiser les rendements", "Minimiser les risques", "Augmenter les frais"]
    
    response = st.radio(question, options)

    if response:
        if response == "Minimiser les risques":
            st.success("Bonne r√©ponse! La diversification permet de r√©duire les risques en r√©partissant les investissements.")
        else:
            st.error("Mauvaise r√©ponse. L'objectif principal de la diversification est de minimiser les risques.")

# Cryptomonnaie
with tabs[13]:
    st.header("üí∞ Cryptomonnaie")
    st.write("""
    La cryptomonnaie est une monnaie num√©rique qui utilise la cryptographie pour s√©curiser les transactions. 
    Certaines des cryptomonnaies les plus populaires sont le Bitcoin (BTC), l'Ethereum (ETH), et le Litecoin (LTC).
    """)

    st.write("**Bitcoin (BTC)** : La premi√®re et la plus c√©l√®bre des cryptomonnaies.")
    st.write("**Ethereum (ETH)** : Une plateforme d√©centralis√©e pour construire des applications sur blockchain.")
    st.write("**Litecoin (LTC)** : Une alternative √† Bitcoin avec un temps de transaction plus rapide.")

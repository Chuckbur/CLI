# app.py
import streamlit as st
import pandas as pd
import yfinance as yf
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

# Configuration de la page
st.set_page_config(page_title="Gestion Financi√®re", layout="wide")

# Menu lat√©ral
st.sidebar.header("Navigation")
page = st.sidebar.selectbox("Choisir une section", 
                           ["Calculateur d'Int√©r√™ts", "Portefeuille", "Watchlist", "Informations Financi√®res", "Profil Financier"])

# Fonction pour calculer les int√©r√™ts compos√©s
def calculer_capital(montant, taux, duree, type_invest="Actions"):
    capital = 0
    evolution = []
    for annee in range(1, duree + 1):
        taux_ajuste = taux / 100 * (1.2 if type_invest == "Actions" else 0.8)
        capital = (capital + montant) * (1 + taux_ajuste)
        evolution.append((annee, round(capital, 2)))
    return pd.DataFrame(evolution, columns=["Ann√©e", "Capital accumul√©"])

# Fonction pour calculer la volatilit√© et la VaR
def calculer_risque(historique):
    try:
        rendements = historique.pct_change().dropna()
        if len(rendements) < 2:
            return "N/A", "N/A"
        volatilite = rendements.std() * np.sqrt(252)  # Annualis√©e
        var = np.percentile(rendements, 5)  # VaR √† 95%
        return volatilite, var
    except:
        return "N/A", "N/A"

# Fonction pour rechercher un symbole depuis un nom
@st.cache_data
def trouver_symbole(nom_ou_symbole):
    nom_ou_symbole = nom_ou_symbole.strip().upper()
    if len(nom_ou_symbole) <= 5:
        return nom_ou_symbole  # Probablement un symbole
    try:
        recherche = yf.Ticker(nom_ou_symbole)
        if recherche:
            return nom_ou_symbole
    except:
        pass
    return nom_ou_symbole

# Suggestions d'actifs populaires
suggestions = ["AAPL", "MSFT", "TSLA", "GOOGL", "AMZN", "VTI", "SPY", "XIC.TO", "QQQ"]

# Cr√©ation du Profil Financier
def creer_profil():
    st.title("üìù Profil Financier")

    age = st.number_input("Quel est votre √¢ge ?", min_value=18, max_value=100, value=30, step=1)
    but = st.selectbox("Quel est votre objectif d'investissement ?", ["Retraite", "Achat immobilier", "√âducation", "Autre"])
    horizon_temps = st.selectbox("Quel est votre horizon d'investissement ?", ["Moins de 1 an", "1 √† 5 ans", "5 ans et plus"])
    risque = st.selectbox("Quelle est votre tol√©rance au risque ?", ["Faible", "Mod√©r√©", "√âlev√©"])
    montant = st.number_input("Combien souhaitez-vous investir en $ ?", min_value=100, value=1000, step=100)

    # Calculer le profil en fonction des r√©ponses
    if st.button("Obtenir des suggestions"):
        # Exemple de logique de suggestion
        suggestions = []
        if risque == "Faible":
            suggestions.append("ETF Obligations")
            if horizon_temps == "5 ans et plus":
                suggestions.append("ETF Actions de dividendes")
        elif risque == "Mod√©r√©":
            suggestions.append("ETF large march√©")
            if horizon_temps == "5 ans et plus":
                suggestions.append("Actions de grandes entreprises")
        else:
            suggestions.append("Actions de croissance")
            if horizon_temps == "5 ans et plus":
                suggestions.append("Technologie")
        
        # Affichage des suggestions
        st.subheader("üí° Suggestions d'investissement bas√©es sur votre profil :")
        for suggestion in suggestions:
            st.write(f"- {suggestion}")

# Section 1 : Calculateur d'Int√©r√™ts Compos√©s
if page == "Calculateur d'Int√©r√™ts":
    st.title("üí∞ Calculateur de Placement et Int√©r√™ts Compos√©s")

    col1, col2 = st.columns(2)
    with col1:
        montant_annuel = st.number_input("Montant investi par an ($)", min_value=0.0, value=1000.0, step=100.0)
        taux_interet = st.number_input("Taux d'int√©r√™t annuel (%)", min_value=0.0, value=5.0, step=0.1)
    with col2:
        annees = st.number_input("Nombre d'ann√©es", min_value=1, value=10, step=1)
        type_invest = st.selectbox("Type d'investissement", ["Actions", "Obligations"])

    if st.button("Calculer"):
        df = calculer_capital(montant_annuel, taux_interet, annees, type_invest)

        st.subheader("üìà √âvolution du capital")
        st.dataframe(df.style.format({"Capital accumul√©": "${:,.2f}"}))

        st.line_chart(df.set_index("Ann√©e")["Capital accumul√©"].rename(type_invest))

        total = df["Capital accumul√©"].iloc[-1]
        st.success(f"Capital final apr√®s {annees} ans : ${total:,.2f}")

        csv = df.to_csv(index=False)
        st.download_button("T√©l√©charger les donn√©es", csv, "evolution_capital.csv", "text/csv")

# Section 2 : Portefeuille
elif page == "Portefeuille":
    st.title("üìä Mon Portefeuille")

    if "portefeuille" not in st.session_state:
        st.session_state.portefeuille = pd.DataFrame(columns=["Actif", "Type", "Quantit√©", "Prix Achat", "Valeur Actuelle"])

    with st.form(key="ajout_actif"):
        recherche = st.text_input("Nom ou symbole du placement")
        quantite = st.number_input("Quantit√©", min_value=0.0, step=1.0)
        bouton_ajouter = st.form_submit_button("Ajouter")

        if bouton_ajouter and recherche:
            try:
                symbole_final = recherche.strip().upper()
                actif = yf.Ticker(symbole_final)
                info = actif.info
                hist = actif.history(period="1d")
                if hist.empty:
                    raise ValueError("Aucune donn√©e disponible")
                prix_actuel = hist["Close"].iloc[-1]
                prix_achat = prix_actuel
                secteur = info.get("sector", "")
                if "ETF" in info.get("quoteType", "").upper() or "ETF" in info.get("longName", "").upper():
                    type_actif = "FNB"
                elif secteur == "Financial Services" or "BOND" in info.get("longName", "").upper():
                    type_actif = "Obligations"
                else:
                    type_actif = "Actions"
                new_row = {"Actif": symbole_final, "Type": type_actif, "Quantit√©": quantite, "Prix Achat": prix_achat, "Valeur Actuelle": prix_actuel}
                st.session_state.portefeuille = pd.concat([st.session_state.portefeuille, pd.DataFrame([new_row])], ignore_index=True)
                st.success(f"{symbole_final} ajout√© au portefeuille !")
            except Exception as e:
                st.error(f"Erreur : {str(e)}")

    if not st.session_state.portefeuille.empty:
        st.subheader("üìà Composition du portefeuille")

        if st.button("üîÑ Mettre √† jour les donn√©es"):
            for i, row in st.session_state.portefeuille.iterrows():
                try:
                    hist = yf.Ticker(row["Actif"]).history(period="1d")
                    if not hist.empty:
                        st.session_state.portefeuille.at[i, "Valeur Actuelle"] = hist["Close"].iloc[-1]
                except:
                    pass

        st.session_state.portefeuille["Valeur Totale"] = st.session_state.portefeuille["Quantit√©"] * st.session_state.portefeuille["Valeur Actuelle"]
        st.session_state.portefeuille["Profit/Perte"] = (st.session_state.portefeuille["Valeur Actuelle"] - st.session_state.portefeuille["Prix Achat"]) * st.session_state.portefeuille["Quantit√©"]

        st.dataframe(st.session_state.portefeuille.style.format({
            "Prix Achat": "${:.2f}", "Valeur Actuelle": "${:.2f}",
            "Valeur Totale": "${:,.2f}", "Profit/Perte": "${:,.2f}"
        }))

# Section 3 : Watchlist
elif page == "Watchlist":
    st.title("üëÄ Ma Watchlist")

    if "watchlist" not in st.session_state:
        st.session_state.watchlist = []

    symbole = st.text_input("Ajouter un symbole √† la watchlist (ex: AAPL)")
    if st.button("Ajouter") and symbole:
        st.session_state.watchlist.append(symbole.upper())
        st.success(f"{symbole.upper()} ajout√© √† la watchlist !")

    if st.session_state.watchlist:
        st.subheader("Ma Watchlist")
        data = {}
        risques = []
        for sym in st.session_state.watchlist:
            try:
                actif = yf.Ticker(sym)
                info = actif.info
                hist = actif.history(period="1d")
                if not hist.empty:
                    data[sym] = hist["Close"].iloc[-1]
                    volatilite, var = calculer_risque(hist)
                    risques.append((sym, volatilite, var))
            except:
                pass
        st.write(data)
        if risques:
            st.write("Volatilit√© et VaR des actifs:")
            for risk in risques:
                st.write(f"{risk[0]} : Volatilit√© = {risk[1]}, VaR = {risk[2]}")

# Section 4 : Informations Financi√®res
elif page == "Informations Financi√®res":
    st.title("üìö Informations Financi√®res")
    st.write("### Qu'est-ce qu'un ETF ?")
    st.write("""
        Un ETF (Exchange Traded Fund) est un fonds d'investissement cot√© en bourse qui suit un indice, une mati√®re premi√®re, un secteur, ou un groupe d'actifs. 
        Il permet aux investisseurs d'obtenir une exposition diversifi√©e tout en ayant une liquidit√© √©lev√©e, √©tant donn√© qu'il peut √™tre achet√© et vendu comme une action.
    """)
    st.write("### Quelle est la diff√©rence entre une action et une obligation ?")
    st.write("""
        Une action repr√©sente une part de propri√©t√© dans une entreprise, tandis qu'une obligation est un instrument de dette o√π l'investisseur pr√™te de l'argent √† une entreprise ou un gouvernement en √©change de paiements d'int√©r√™ts.
    """)

# Section 5 : Profil Financier
elif page == "Profil Financier":
    creer_profil()
